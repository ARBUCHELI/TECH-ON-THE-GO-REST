# Introduction
--------------

* What is REST?
---------------
	. REST IS ONE WAY TO STRUCTURE AN API

	. AN API IS A SYSTEM FOR MAKING INFORMATION AVAILABLE OVER A NETWORK AND DESCRIBING HOW TO ACCESS THAT INFORMATION

	. AN API IS LIKE A MENU FOR A RESTAURANT

		. It describes the types of data available

		. How to request each type

	
	. API OPTIONS

		. REST

		. GraphQL

		. SOAP


	. REST (Representational State Transfer)

	. REST WAS DESIGNED FOR SYSTEMS THAT TRANSFER DATA OVER A NETWORK LIKE THE WEB. TO WORK WITH A DATA OBJECT REST CREATE A REPRESENTATION OF THAT OBJECT WHICH COMBINES THE DATA
	ITSELF WITH METADATA THAT DESCRIBES THE OBJECT.

	. THAT REPRESENTATION INCLUDES INFORMATION ABOUT EITHER THE CURRENT STATE OF THE OBJECT OR AN INTENDED CHANGED STATE, AND THE REPRESENTATION IS TRANSFERRED BETWEEN THE DIFFERENT
	COMPONENTS OF THE APPLICATION THAT'S WORKING WITH THE DATA. 

	* R E S T - IS AN ARCHITECTURE THAT USES A REPRESENTATION OF DATA TO COMMUNICATE ABOUT THE STATE OF THAT DATA BY TRANSFERRING THE REPRESENTATION BETWEEN COMPONENTS OF A NETWORKED
	APPLICATION.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* The problems that REST solves
-------------------------------
	. ROY FIELDING CREATED REST AND HTTP

	. THE DESIGN OF REST INFLUENCES THE ARCHITECTURE OF THE WEB

		. The focus on state transfer has enabled the development of web applications in multiple parts
		
			. Front-End

			. Back-End

	. WHEN USING REST, DATA CAN BE ANYTHING

		. This allowed to switch from XML to JSON


	. HATEOAS (HYPERTEXT AS THE ENGINE OF APPLICATION STATE)

		. IN A REST API, A REPRESENTATION INCLUDES INFORMATION ABOUT THE STATE OF AN OBJECT. IN FACT, THE ENTIRE REQUEST IS SUMMARIZED IN THAT STATE DESCRIPTION AND REST REPRESEN
		TATIONS CAN ALSO INCLUDE LINKS THAT LEAD TO OTHER POTENTIAL NEXT APPLICATION STATES.

		. ALTHOUGH THESE LINKS ARE FORMATTED FOR PROGRAMMATIC USE, RATHER THAN FOR USER INTERACTION, THEY'RE STILL A FORM OF HYPERTEXT, AND THE APPLICATION CAN THEN USE THIS 
		HYPERTEXT THAT'S INCLUDED AS PART OF THE REPRESENTATION, TO MOVE TO A NEW APPLICATION STATE.

		. AS REST WAS ORIGINALLY DESCRIBED, THE IDEA OF HYPERTEXT AS THE ENGINE OF APPLICATION STATE IS A CORE COMPONENT OF WHAT MAKES REST API, RESTFUL.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* REST constraints
------------------
The REST architecture is defined by six constraints:

	THE FIRST TWO CONSTRAINTS, CLIENT SERVER ARCHITECTURE AND STATELESSNESS WERE CONSTRAINTS OF THE EARLY ARCHITECTURE OF THE WEB

	. Is a client-server architecture - (this brigns separation of concerns to REST between the frontend and the backend).

	. Statelessness - (The session state is kept entirely on the client. This makes the full nature of each request apparent in the requested itself, makes recovery from partial 		failures easier, and helps scalability by not requiring server resources for storing state.

		In web applications, this constraint means that what a user sees in a browser window while interacting with an application, represents the current state of the app. The
		client can then use REST to make requests to the server to create or change resources in response to this new state.

		
	. Caching - By labeling data within a response as cachable or non-cachable this constrain improves network efficiency, as well as the user's perception of the application
	performance.

		In web applications is common for media like images to be cached the first time a client accesses the app.

	
	. Uniform interface - This can be the central feature that distinguishes REST. A REST application implements a general process, rather than only coding access to a specific 
	set of resources.

		You can architect an application to work with one REST API and uses the same application to interact with any other API that implements REST.

	
	. System or hierarchical layers within the architecture - A component interacts only with a given REST layer. The REST model does not provide visibility into the component outside
	of that layer.

		Advantages:
			Limiting complexity, promoting the independence of each layer, enabling the integration of legacy services, and allowing for redundancy.


	. The final constraint is optional - Code on demand - This enables an implementation to extend the functionality of a client using scripts or other code that the user interface
	can execute.

		This constraint simplifies clients, because it reduces the number of features that the developer has to implement, in advance and makes the system extensible.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* How REST has evolved
----------------------

REST has served as a significant model for API development on the web. But over time rest implementations have evolved. 

Some of these changes were enabled by the flexible nature of REST, while others represent evolutions beyond the basics of the REST architecture. 

When REST was first implemented, XML was by far the most common format used for data transmitted over the web. Even so, REST was built to work with any data format that a representation might contain. 

Over time, the JSON format has overtaken XML to become the dominant format for data on the web. Because of the foresight that went into making REST flexible in this regard, the REST architecture has remained just as relevant for web data today as it was when it was first described. 

Another area in which REST was created to be flexible was in the way it handled the ability to download additional application logic. 

When REST was created, the web was mostly just HTML and CSS. But the REST specification allows for responses to incorporate additional code on demand. 

Because REST took a flexible approach in this area from the start, the REST architecture was able to adapt as JavaScript code became the dominant form of logic executed within browsers. 

Today, it's common to think of web applications as combining HTML, CSS and JavaScript almost by definition. 

When REST was created, it was not clear that the web would evolve in this direction. 

But once again, the fact that REST didn't insist on a certain format or specification for code on demand has ensured its continued relevance. 

But REST implementations have also emerged that use some of the components of the architecture, but not all of them. 

Perhaps the most noteworthy are REST APIs that do not use hypertext as the engine of application state. These APIs are often tightly bound to the structure of HTTP just like traditional REST. And rely on the same separation between the client and server components of the application. But instead of including hypertext within representations, they may instead require hard coded information within the client code to understand what next states are available for a resource as well as how to make requests to those states. 

As originally envisioned by Roy Fielding, a REST representation contains all the state information necessary for an application without needing additional resources. One advantage to this structure is that the API location or structure can change without also needing to make changes to code to accommodate it, because the code will always look to the representation to understand what's possible and how to take the next step in changing state. 

Fielding has said that fully implementing REST may be less efficient in the short term, but that the trade-off for that short term pain is software longevity. 

But some API builders don't find this flexibility compelling or necessary and may instead choose to simplify their implementations by emitting the hateoas aspect. 

Fielding himself has encouraged API builders not to stick to aspects of REST that don't make sense for their systems. 

However, he suggests that the resulting work should not be labeled a REST API. 

While there may be a healthy back and forth on what to call these implementations such APIs are clearly heavily influenced by the REST architecture, and that common foundation often means that developers working with those APIs are able to do so easily because of the many commonalities.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Alternatives to REST
----------------------
REST is a really common API architecture on the web today, but it's certainly not the only one. 

In fact, many different architectures are in use. 

A few others are particularly common, though. 

	. One of those is the Simple Object Access Protocol or SOAP. 

		SOAP was created around the same time as REST, and initially, SOAP was much more popular on the web than REST. 

		Unlike REST, which does not have a centralized standard, SOAP is a protocol that's an official recommendation of the Worldwide Web Consortium or the W3C. 

		One of the biggest differences between SOAP and REST is that SOAP is built on extensible markup language, or XML, and requires XML as its data format. 

		This means that SOAP doesn't have the flexibility of REST when it comes to content. 

		In addition, content encoded as XML requires more data than the same content encoded in other common data formats like JSON or YAML, meaning that XML can take more 
		bandwidth to transmit. 

		This and other strict rules of SOAP bring benefits to using the protocol however. 	

		Software that supports building and integrating SOAP APIs can offer help to developers in these tasks, because there are fewer choices left to the developer than in a 
		REST API. 

		SOAP also has error handling built in. 

		In addition, while there may be more REST APIs on the web overall today, in the enterprise space, SOAP is commonly the standard, meaning that there's a large base of 		knowledge and user community in place. 


	. Another more recent API architecture is GraphQL. While SOAP and REST share some structural commonalities, GraphQL represents a significantly different approach to structuring 
	API endpoints. 

		Instead of offering a set of static API endpoints with fixed data structures in the response, GraphQL enables an API request to specify exactly what data it wants, as 
		well as how it wants that data structured. 

		This means that GraphQL responses can avoid delivering unnecessary data and can provide related data in a single request, where REST or SOAP might require multiple 
		requests to receive a complete set of related data. 

		To harness the power of GraphQL requires understanding some of its complexities, so it's not as easy for a new user to work with as REST. 


	. Yet another common API architecture is GRPC, which is based on a Google defined standard for remote procedure call. 

		In GRPC, an API call executes a backend function and returns the result. 

		he function call can include parameters and other information, much like a REST API call. 

		GRPC is commonly used for simple calls to specific types of backend systems. 

		Unlike REST in which the client and server parts of the application are separate, in a GRPC system, all aspects are custom coded to work together. 

		This means that the code often isn't reusable. 


	. One additional API architecture in common use today is an API based on REST, but leaving out one or more of the REST constraints. 

		For instance, some APIs that consider themselves restful do not incorporate hypertext as the engine of application state. 

		Adaptations of the REST architecture may meet an organization's API needs better than simply applying all of the constraints of REST, at the cost of a lack of 
		predictability by deviating from a known structure.


------------------------------------------------------------------------------------------------------------------------------------------------------------------



























	
		


























































	