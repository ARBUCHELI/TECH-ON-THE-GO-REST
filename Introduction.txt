# Introduction
--------------

* What is REST?
---------------
	. REST IS ONE WAY TO STRUCTURE AN API

	. AN API IS A SYSTEM FOR MAKING INFORMATION AVAILABLE OVER A NETWORK AND DESCRIBING HOW TO ACCESS THAT INFORMATION

	. AN API IS LIKE A MENU FOR A RESTAURANT

		. It describes the types of data available

		. How to request each type

	
	. API OPTIONS

		. REST

		. GraphQL

		. SOAP


	. REST (Representational State Transfer)

	. REST WAS DESIGNED FOR SYSTEMS THAT TRANSFER DATA OVER A NETWORK LIKE THE WEB. TO WORK WITH A DATA OBJECT REST CREATE A REPRESENTATION OF THAT OBJECT WHICH COMBINES THE DATA
	ITSELF WITH METADATA THAT DESCRIBES THE OBJECT.

	. THAT REPRESENTATION INCLUDES INFORMATION ABOUT EITHER THE CURRENT STATE OF THE OBJECT OR AN INTENDED CHANGED STATE, AND THE REPRESENTATION IS TRANSFERRED BETWEEN THE DIFFERENT
	COMPONENTS OF THE APPLICATION THAT'S WORKING WITH THE DATA. 

	* R E S T - IS AN ARCHITECTURE THAT USES A REPRESENTATION OF DATA TO COMMUNICATE ABOUT THE STATE OF THAT DATA BY TRANSFERRING THE REPRESENTATION BETWEEN COMPONENTS OF A NETWORKED
	APPLICATION.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* The problems that REST solves
-------------------------------
	. ROY FIELDING CREATED REST AND HTTP

	. THE DESIGN OF REST INFLUENCES THE ARCHITECTURE OF THE WEB

		. The focus on state transfer has enabled the development of web applications in multiple parts
		
			. Front-End

			. Back-End

	. WHEN USING REST, DATA CAN BE ANYTHING

		. This allowed to switch from XML to JSON


	. HATEOAS (HYPERTEXT AS THE ENGINE OF APPLICATION STATE)

		. IN A REST API, A REPRESENTATION INCLUDES INFORMATION ABOUT THE STATE OF AN OBJECT. IN FACT, THE ENTIRE REQUEST IS SUMMARIZED IN THAT STATE DESCRIPTION AND REST REPRESEN
		TATIONS CAN ALSO INCLUDE LINKS THAT LEAD TO OTHER POTENTIAL NEXT APPLICATION STATES.

		. ALTHOUGH THESE LINKS ARE FORMATTED FOR PROGRAMMATIC USE, RATHER THAN FOR USER INTERACTION, THEY'RE STILL A FORM OF HYPERTEXT, AND THE APPLICATION CAN THEN USE THIS 
		HYPERTEXT THAT'S INCLUDED AS PART OF THE REPRESENTATION, TO MOVE TO A NEW APPLICATION STATE.

		. AS REST WAS ORIGINALLY DESCRIBED, THE IDEA OF HYPERTEXT AS THE ENGINE OF APPLICATION STATE IS A CORE COMPONENT OF WHAT MAKES REST API, RESTFUL.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* REST constraints
------------------
The REST architecture is defined by six constraints:

	THE FIRST TWO CONSTRAINTS, CLIENT SERVER ARCHITECTURE AND STATELESSNESS WERE CONSTRAINTS OF THE EARLY ARCHITECTURE OF THE WEB

	. Is a client-server architecture - (this brigns separation of concerns to REST between the frontend and the backend).

	. Statelessness - (The session state is kept entirely on the client. This makes the full nature of each request apparent in the requested itself, makes recovery from partial 		failures easier, and helps scalability by not requiring server resources for storing state.

		In web applications, this constraint means that what a user sees in a browser window while interacting with an application, represents the current state of the app. The
		client can then use REST to make requests to the server to create or change resources in response to this new state.

		
	. Caching - By labeling data within a response as cachable or non-cachable this constrain improves network efficiency, as well as the user's perception of the application
	performance.

		In web applications is common for media like images to be cached the first time a client accesses the app.

	
	. Uniform interface - This can be the central feature that distinguishes REST. A REST application implements a general process, rather than only coding access to a specific 
	set of resources.

		You can architect an application to work with one REST API and uses the same application to interact with any other API that implements REST.

	
	. System or hierarchical layers within the architecture - A component interacts only with a given REST layer. The REST model does not provide visibility into the component outside
	of that layer.

		Advantages:
			Limiting complexity, promoting the independence of each layer, enabling the integration of legacy services, and allowing for redundancy.


	. The final constraint is optional - Code on demand - This enables an implementation to extend the functionality of a client using scripts or other code that the user interface
	can execute.

		This constraint simplifies clients, because it reduces the number of features that the developer has to implement, in advance and makes the system extensible.


------------------------------------------------------------------------------------------------------------------------------------------------------------------




























	
		


























































	